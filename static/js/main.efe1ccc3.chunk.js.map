{"version":3,"sources":["app/Navbar.js","api/client.js","selectors/query.js","selectors/page.js","features/news/newsSlice.js","features/bookmarks/bookmarksSlice.js","features/bookmarks/BookmarkButton.js","features/news/ItemExcerpt.js","components/PageLink.js","features/news/ListLayout.js","features/news/NewsList.js","features/bookmarks/BookmarksList.js","App.js","reportWebVitals.js","app/store.js","index.js"],"names":["NavLink","props","getProps","className","isCurrent","Navbar","location","useLocation","searchParams","URLSearchParams","search","paramQuery","get","useState","query","setQuery","intl","useIntl","navigate","useNavigate","useEffect","to","id","defaultMessage","description","onSubmit","e","preventDefault","set","delete","entries","next","done","pathname","xmlns","viewBox","fillRule","d","fill","stroke","strokeWidth","type","placeholder","formatMessage","value","onChange","target","client","url","a","fetch","response","ok","Error","status","json","makeSelectByQuery","selectItems","createSelector","state","news","re","RegExp","escapeStringRegexp","filter","item","test","headline","summary","makeSelectByPage","perPage","page","items","total","length","start","end","Math","min","slice","newsAdapter","createEntityAdapter","sortComparer","b","datetime","initialState","getInitialState","error","fetchNews","createAsyncThunk","newsSlice","createSlice","name","reducers","extraReducers","pending","action","fulfilled","upsertMany","payload","rejected","message","getSelectors","selectAllNews","selectAll","selectNewsByPage","selectById","selectIds","bookmarksSlice","bookmarkTriggered","itemId","index","indexOf","push","splice","actions","selectBookmarksByPage","entities","bookmarks","map","BookmarkButton","dispatch","useDispatch","added","useSelector","includes","classname","clsx","title","onClick","width","height","ItemExcerpt","isLast","related","day","month","values","n","href","rel","src","image","alt","PageLink","disabled","other","String","ListLayout","selectItemsByPage","itemClass","empty","parseInt","itemStatus","secondary","chunks","NewsList","content","firstItem","BookmarksList","App","basepath","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","newsReducer","bookmarksReducer","ReactDOM","render","StrictMode","store","locale","defaultLocale","document","getElementById"],"mappings":"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","file":"static/js/main.efe1ccc3.chunk.js","sourcesContent":["import {useEffect, useState} from 'react'\nimport { Link, useLocation, useNavigate } from '@reach/router'\nimport { FormattedMessage, useIntl } from 'react-intl'\n\nimport './Navbar.scss';\n\nconst NavLink = props => (\n  <Link\n    {...props}\n    getProps={({ isCurrent }) => ({\n      className: isCurrent ? 'active' : ''\n    })}\n  />\n)\n\nexport const Navbar = () => {\n  const location = useLocation()\n  const searchParams = new URLSearchParams(location.search)\n  const paramQuery = searchParams.get('q') || ''\n\n  const [query, setQuery] = useState(paramQuery)\n\n  const intl = useIntl()\n  const navigate = useNavigate()\n\n  const onQueryChanged = e => setQuery(e.target.value)\n  useEffect(() => setQuery(paramQuery), [paramQuery])\n\n  const handleSubmit = e => {\n    e.preventDefault()\n\n    if (query) {\n      searchParams.set('q', query)\n    } else {\n      searchParams.delete('q')\n    }\n    searchParams.delete('p')\n\n    navigate(searchParams.entries().next().done ? location.pathname : `?${searchParams}`)\n  }\n\n  return (\n    <div className=\"Navbar flex-row\">\n      <nav className=\"Navbar-links flex-small\">\n        <div>\n          <NavLink to=\"/\">\n            <FormattedMessage id=\"news\"\n              defaultMessage=\"News\"\n              description=\"Link\"\n            />\n          </NavLink>\n        </div>\n        <div>\n          <NavLink to=\"bookmarks\">\n            <FormattedMessage id=\"bookmarks\"\n              defaultMessage=\"Bookmarks\"\n              description=\"Link\"\n            />\n          </NavLink>\n        </div>\n      </nav>\n      <section className=\"flex-small Navbar-search\">\n        <form onSubmit={handleSubmit}>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 13 13\">\n            <path fillRule=\"evenodd\" d=\"M.9 5.37a4.37 4.37 0 118.73 0 4.37 4.37 0 01-8.73 0zm7.64 3.81l3.3 3.12-3.3-3.12z\" fill=\"none\" stroke=\"#fff\" strokeWidth=\"2\"/>\n          </svg>\n          <input\n            type=\"search\"\n            placeholder={intl.formatMessage({\n              id: 'search',\n              defaultMessage: 'Search',\n              description: 'Placeholder',\n            })}\n            value={query}\n            onChange={onQueryChanged}\n          />\n        </form>\n      </section>\n    </div>\n  )\n}","const client = {\n  get: async url => {\n    const response = await fetch(url);\n\n    if (!response.ok) {\n      throw new Error(`Request failed with status code ${response.status}`);\n    }\n\n    return response.json();\n  },\n}\n\nexport { client }","import { createSelector } from '@reduxjs/toolkit'\r\nimport escapeStringRegexp from 'escape-string-regexp'\r\n\r\nexport const makeSelectByQuery = selectItems => createSelector(\r\n  [selectItems, (state, { query }) => query],\r\n  (news, query) => {\r\n    if (query) {\r\n      const re = new RegExp(escapeStringRegexp(query), 'i')\r\n      news = news.filter(item => re.test(item.headline) || re.test(item.summary))\r\n    }\r\n    return news\r\n  }\r\n)","import { createSelector } from '@reduxjs/toolkit'\r\n\r\nexport const makeSelectByPage = (selectItems, perPage) => createSelector(\r\n  [selectItems, (state, { page }) => page],\r\n  (items, page) => {\r\n    const total = items.length\r\n    const start = page * perPage\r\n    const end = Math.min(total, start + perPage)\r\n    return {\r\n      total,\r\n      start,\r\n      end,\r\n      items: items.slice(start, end)\r\n    }\r\n  }\r\n)","import { createAsyncThunk, createEntityAdapter, createSelector, createSlice } from '@reduxjs/toolkit'\n\nimport { client } from '../../api/client'\nimport { makeSelectByQuery } from '../../selectors/query'\nimport { makeSelectByPage } from '../../selectors/page'\n\nconst newsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => b.datetime - a.datetime,\n})\n\nconst initialState = newsAdapter.getInitialState({\n  status: 'idle',\n  error: null,\n})\n\nexport const fetchNews = createAsyncThunk('news/fetchNews', () =>\n  client.get('company-news.json'))\n\nconst newsSlice = createSlice({\n  name: 'news',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchNews.pending]: (state, action) => {\n      state.status = 'loading'\n    },\n    [fetchNews.fulfilled]: (state, action) => {\n      state.status = 'succeeded'\n      // Add any fetched news to the array\n      newsAdapter.upsertMany(state, action.payload)\n    },\n    [fetchNews.rejected]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    },\n  },\n})\n\nexport default newsSlice.reducer\n\n// Export the customized selectors for this adapter using `getSelectors`\nexport const {\n  selectAll: selectAllNews,\n  selectById: selectItemById,\n  selectIds: selectItemIds,\n} = newsAdapter.getSelectors(state => state.news)\n\nconst selectNewsWithoutFirst = createSelector(\n  selectAllNews,\n  news => news.slice(1)\n)\n\nconst selectNewsByQuery = makeSelectByQuery(selectNewsWithoutFirst)\nexport const selectNewsByPage = makeSelectByPage(selectNewsByQuery, 6)","import { createSelector, createSlice } from '@reduxjs/toolkit'\nimport { makeSelectByQuery } from '../../selectors/query'\nimport { makeSelectByPage } from '../../selectors/page'\n\nconst initialState = []\n\nconst bookmarksSlice = createSlice({\n  name: 'bookmarks',\n  initialState,\n  reducers: {\n    bookmarkTriggered(state, action) {\n      const itemId = action.payload\n      const index = state.indexOf(itemId)\n      if (index === -1) {\n        state.push(itemId)\n      } else {\n        state.splice(index, 1)\n      }\n    },\n  },\n})\n\nexport const { bookmarkTriggered } = bookmarksSlice.actions\n\nexport default bookmarksSlice.reducer\n\nexport const selectBookmarked = createSelector(\n  [state => state.news.entities, state => state.bookmarks],\n  (news, bookmarks) => bookmarks.map(itemId => news[itemId])\n)\n\nconst selectBookmarksByQuery = makeSelectByQuery(selectBookmarked)\nexport const selectBookmarksByPage = makeSelectByPage(selectBookmarksByQuery, 8)","import React from 'react'\nimport clsx from 'clsx';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useIntl } from 'react-intl';\n\nimport { bookmarkTriggered } from './bookmarksSlice'\nimport './BookmarkButton.scss';\n\nexport const BookmarkButton = ({ itemId }) => {\n  const dispatch = useDispatch()\n  const intl = useIntl()\n\n  const added = useSelector(state => state.bookmarks.includes(itemId))\n\n  const classname = clsx('BookmarkButton', {\n    added,\n  })\n\n  return (\n    <button\n      type=\"button\"\n      title={intl.formatMessage({\n        id: 'add-to-bookmarks',\n        defaultMessage: 'Add to Bookmarks',\n        description: 'Hint',\n      })}\n      className={classname}\n      onClick={() =>\n        dispatch(bookmarkTriggered(itemId))\n      }\n    >\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"13\">\n        <path d=\"M0 0h11.5v12.3L5.7 10 0 12.3V0z\" />\n      </svg>\n    </button>\n  )\n}","import { FormattedDate, FormattedMessage } from 'react-intl';\r\n\r\nimport { BookmarkButton } from '../bookmarks/BookmarkButton';\r\nimport './ItemExcerpt.scss';\r\n\r\nexport const ItemExcerpt = ({ item, isLast }) =>\r\n  (\r\n    <article className=\"ItemExcerpt\">\r\n      <div className=\"ItemExcerpt-related\">{item.related}</div>\r\n      {isLast && <div className=\"ItemExcerpt-last\">\r\n        <FormattedMessage id=\"latest-news\"\r\n          defaultMessage=\"Latest News\"\r\n          description=\"Label\" />\r\n      </div>}\r\n      <div className=\"ItemExcerpt-title\">\r\n        <h3>{item.headline}</h3>\r\n        <p>{item.summary}</p>\r\n      </div>\r\n      <div className=\"ItemExcerpt-info\">\r\n        {isLast && <div className=\"ItemExcerpt-read-news\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\">\r\n            <path d=\"M10.5 20a9.6 9.6 0 110-19.3 9.6 9.6 0 010 19.2z\" />\r\n            <path d=\"M6.5 10.6h6.9\" />\r\n            <path d=\"M11.8 8l2.3 2.4-2.3 2.5\" />\r\n          </svg>\r\n          <FormattedMessage id=\"read-news\"\r\n            defaultMessage=\"Read News\"\r\n            description=\"Link\" />\r\n        </div>}\r\n        <div className=\"ItemExcerpt-datetime\">\r\n          <FormattedDate value={item.datetime * 1000} day=\"2-digit\" month=\"short\" />\r\n        </div>\r\n        <div className=\"ItemExcerpt-min-read\">\r\n          <FormattedMessage id=\"n-min-read\" defaultMessage=\"{n} min read\" values={{ n: 6 }} />\r\n        </div>\r\n      </div>\r\n      <div className=\"ItemExcerpt-buttons\">\r\n        <svg className=\"ItemExcerpt-link\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11\" height=\"14\">\r\n          <path d=\"M1.5 12.2v-5l7.6-5\" />\r\n          <path d=\"M6.3 1.7h3V5\" />\r\n        </svg>\r\n        <BookmarkButton itemId={item.id} />\r\n      </div>\r\n      <a\r\n        href={item.url}\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        <img src={item.image} alt={item.headline} />\r\n      </a>\r\n    </article>\r\n  )","import { Link, useLocation } from '@reach/router'\r\n\r\nexport const PageLink = ({ page, disabled, ...other }) => {\r\n  const location = useLocation()\r\n\r\n  if (disabled) {\r\n    return <button disabled className=\"round-button\" {...other} />\r\n  }\r\n\r\n  const searchParams = new URLSearchParams(location.search)\r\n  if (page > 0) {\r\n    searchParams.set('p', String(page))\r\n  } else {\r\n    searchParams.delete('p')\r\n  }\r\n  const to = searchParams.entries().next().done ? location.pathname : `?${searchParams}`\r\n\r\n  return <Link to={to} className=\"round-button button\" {...other} />\r\n}","import { useSelector } from 'react-redux'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport { useLocation } from '@reach/router'\r\n\r\nimport { ItemExcerpt } from './ItemExcerpt'\r\nimport { PageLink } from '../../components/PageLink'\r\nimport './ListLayout.scss';\r\nimport clsx from 'clsx'\r\n\r\nexport const ListLayout = ({ selectItemsByPage, itemClass, empty }) => {\r\n  const location = useLocation()\r\n  const searchParams = new URLSearchParams(location.search)\r\n  const page = parseInt(searchParams.get('p') || 0)\r\n  const query = searchParams.get('q')\r\n\r\n  const {\r\n    items,\r\n    start,\r\n    end,\r\n    total,\r\n  } = useSelector(state => selectItemsByPage(state, { query, page }))\r\n\r\n  const itemStatus = useSelector(state => state.news.status)\r\n  const error = useSelector(state => state.news.error)\r\n\r\n  if (itemStatus === 'loading') {\r\n    return <div className=\"loader\"><FormattedMessage id=\"loading\" defaultMessage=\"Loading...\" /></div>\r\n  } else if (itemStatus === 'succeeded') {\r\n    const classname = clsx('flex-small', itemClass)\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"ListLayout-list flex-row\">\r\n          {items.length ? items.map(item => (\r\n            <div key={item.id} className={classname}>\r\n              <ItemExcerpt item={item} />\r\n            </div>\r\n          )) : <div className=\"ListLayout-empty\">{empty}</div>}\r\n        </div>\r\n        <div className=\"ListLayout-page\">\r\n          <div className=\"ListLayout-page-info\">\r\n            <FormattedMessage id=\"out-of-n\"\r\n              defaultMessage=\"{start}-{end} <secondary>out of {total}</secondary>\"\r\n              values={{\r\n                start: start + 1,\r\n                end,\r\n                secondary: chunks => <span>{chunks}</span>,\r\n                total\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"ListLayout-page-buttons\">\r\n            <PageLink disabled={start === 0} page={page - 1}>\r\n              <FormattedMessage id=\"previous\"\r\n                defaultMessage=\"Previous\"\r\n                description=\"Link\"\r\n              />\r\n            </PageLink>\r\n            <PageLink disabled={end === total} page={page + 1}>\r\n              <FormattedMessage id=\"next\"\r\n                defaultMessage=\"Next\"\r\n                description=\"Link\"\r\n              />\r\n            </PageLink>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  } else if (itemStatus === 'failed') {\r\n    return <div>{error}</div>\r\n  }\r\n}","import { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useIntl, FormattedMessage } from 'react-intl'\n\nimport { fetchNews, selectAllNews, selectNewsByPage } from './newsSlice'\nimport { ItemExcerpt } from './ItemExcerpt'\nimport { ListLayout } from './ListLayout'\n\nexport const NewsList = () => {\n  const dispatch = useDispatch()\n  const intl = useIntl()\n\n  const firstItem = useSelector(state => selectAllNews(state)[0])\n\n  const itemStatus = useSelector(state => state.news.status)\n  const error = useSelector(state => state.news.error)\n\n  useEffect(() => {\n    if (itemStatus === 'idle') {\n      dispatch(fetchNews())\n    }\n  }, [itemStatus, dispatch])\n\n  let content\n\n  if (itemStatus === 'loading') {\n    content = <div className=\"loader\"><FormattedMessage id=\"loading\" defaultMessage=\"Loading...\" /></div>\n  } else if (itemStatus === 'succeeded') {\n    content = (\n      <div className=\"flex-row\">\n        <div className=\"NewsList-last flex-small one-third\">\n          <ItemExcerpt item={firstItem} isLast />\n        </div>\n        <div className=\"flex-small two-thirds\">\n          <ListLayout\n            selectItemsByPage={selectNewsByPage}\n            itemClass=\"one-third\"\n            empty={intl.formatMessage({\n              id: 'not-found',\n              defaultMessage: 'Nothing Found',\n            })}\n          />\n        </div>\n      </div>\n    )\n  } else if (itemStatus === 'failed') {\n    content = <div>{error}</div>\n  }\n\n  return (\n    <section className=\"NewsList\">\n      {content}\n    </section>\n  )\n}","import { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useIntl, FormattedMessage } from 'react-intl'\r\n\r\nimport { fetchNews } from '../news/newsSlice'\r\nimport { selectBookmarksByPage } from './bookmarksSlice';\r\nimport { ListLayout } from '../news/ListLayout'\r\n\r\nexport const BookmarksList = () => {\r\n  const dispatch = useDispatch()\r\n  const intl = useIntl()\r\n\r\n  const itemStatus = useSelector(state => state.news.status)\r\n  const error = useSelector(state => state.news.error)\r\n\r\n  useEffect(() => {\r\n    if (itemStatus === 'idle') {\r\n      dispatch(fetchNews())\r\n    }\r\n  }, [itemStatus, dispatch])\r\n\r\n  let content\r\n\r\n  if (itemStatus === 'loading') {\r\n    content = <div className=\"loader\"><FormattedMessage id=\"loading\" defaultMessage=\"Loading...\" /></div>\r\n  } else if (itemStatus === 'succeeded') {\r\n    content = (\r\n      <ListLayout\r\n        selectItemsByPage={selectBookmarksByPage}\r\n        itemClass=\"one-fourth\"\r\n        empty={intl.formatMessage({\r\n          id: 'empty',\r\n          defaultMessage: 'Empty',\r\n        })}\r\n      />\r\n    )\r\n  } else if (itemStatus === 'failed') {\r\n    content = <div>{error}</div>\r\n  }\r\n\r\n  return (\r\n    <section className=\"BookmarksList\">\r\n      {content}\r\n    </section>\r\n  )\r\n}","import { LocationProvider, Router } from '@reach/router';\n\nimport { Navbar } from './app/Navbar';\nimport { NewsList } from './features/news/NewsList';\nimport { BookmarksList } from './features/bookmarks/BookmarksList';\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <header className=\"App-header\">\n        <LocationProvider>\n          <Navbar />\n        </LocationProvider>\n      </header>\n      <Router basepath=\"/darqube-test-preview\">\n        <NewsList path=\"/\" />\n        <BookmarksList path=\"bookmarks\" />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\r\n\r\nimport newsReducer from '../features/news/newsSlice';\r\nimport bookmarksReducer from '../features/bookmarks/bookmarksSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    news: newsReducer,\r\n    bookmarks: bookmarksReducer,\r\n  },\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { IntlProvider } from 'react-intl';\n\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './app/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <IntlProvider locale=\"en-GB\" defaultLocale=\"en-GB\">\n        <App />\n      </IntlProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}